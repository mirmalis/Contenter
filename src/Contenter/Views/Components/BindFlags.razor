@typeparam T where T : struct, System.Enum
@code {
  [Parameter] public T value { get; set; }
  [Parameter] public EventCallback<T> valueChanged { get; set; }
  [Parameter]
  public string? Label { get; set; } = "Flags";
}
<FluentInputLabel Label="@this.Label" />
<table class="w-100">
  <tr>
    <td>
      <label>
        <FluentSwitch ValueChanged=@(val => ToggleFlag(this.none)) 
          Disabled=@(this.value.Equals(this.none))
          Value="@(this.value.Equals(this.none))" />
        @this.none
      </label>
    </td>
  </tr>
  @foreach (var item in Enum.GetValues<T>().Where(item => !item.Equals(this.none)))
  {
    @* var isNone = item.Equals(none); *@
    <tr>
      <td>
        <label>
          <FluentSwitch ValueChanged=@(val => ToggleFlag(item)) Value="@(this.value.HasFlag(item))" />
          @* <input type="checkbox"
                 disabled="@(!isNone && this.value.HasFlag(all) && (!item.Equals(all)))"
                 checked="@((!isNone && this.value.HasFlag(item)) || (isNone && intValue == 0))"
                 @onclick=@(() => ToggleFlag(item)) /> *@
          @item
        </label>
      </td>
    </tr>
  }
</table>
@code {
  private const Int64 max = Int64.MaxValue;
  private T none = toEnum(0);
  private T all = toEnum(max);
  Int64 intValue => toLong(this.value);
  private static Int64 toLong(T enumValue)
  {
    return System.Runtime.CompilerServices.Unsafe.As<T, Int64>(ref enumValue);
  }
  private static T toEnum(Int64 enumValue)
  {
    return System.Runtime.CompilerServices.Unsafe.As<Int64, T>(ref enumValue);
  }
  private void ToggleFlag(T flag, bool? newState = null)
  {
    if (flag.Equals(none))
    {
      this.value = none;
    }
    else if (flag.Equals(all))
    {
      if (this.value.HasFlag(all))
      {
        this.value = none;
      }
      else
      {
        this.value = all;
      }
    }
    else if (this.value.HasFlag(flag))
    {
      int intValue = Convert.ToInt32(value);
      int intFlag = Convert.ToInt32(flag);
      int result = intValue & ~intFlag;
      value = (T)Enum.ToObject(typeof(T), result);
    }
    else
    {
      this.value = toEnum(toLong(this.value) | toLong(flag));
    }

    //if (this.intValue == Int64.MaxValue)
    //{
    //  this.value = toEnum(0);
    //  //this.value = (T)0;
    //}
    //else if (toLong(flag) == Int64.MaxValue)
    //{
    //  this.value = flag;
    //}
    //else
    //{
    //  //this.value ^= flag;
    //  this.value = toEnum(toLong(this.value) ^ toLong(flag));
    //}
    this.valueChanged.InvokeAsync(this.value);
  }
}
