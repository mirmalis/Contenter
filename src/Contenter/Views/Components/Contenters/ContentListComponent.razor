@inject Contenter.Data.Database db
@code {
  [Parameter]
  public int? Take { get; set; }

  [Parameter]
  public bool Main { get; set; }
}
<MyLoader 
  Take=@this.Take
  ParamSource=@(
    this.db.Contents
    .Where(item => !this.Main || !item.Flags.HasFlag(Models.Contents.ContentFlags.NotAtMain))
    .OrderByDescending(item => item.CreatedAt)
    .Select(ct => new ContentView {
      Id = ct.Id,
      Name = ct.Name,
      Fam = ct.FamId == null ? null : new FamView(){
        Id = ct.FamId!.Value,
        Name = ct.Fam!.Name,
      },
      Things = ct.GuestPersonaAssignments
        .OrderBy(item => item.IndexA).ThenBy(item => item.Guest.Name)
        .Select(gass => new ThingView {
          Id = gass.Guest.Id,
          Name = gass.Guest.Name,
          Definition = new (){
            Id = gass.Guest.ThingDefinitionId,
            Name = gass.Guest.ThingDefinition!.Name,
            PluralName = gass.Guest.ThingDefinition.Plural,
          }
        }),
      Sources = ct.Sources
        .OrderByDescending(s => s.CreatedAt)
        .Select(s => new SourceView {
          Id =  s.Id,
          Name = null ,
          Href = s.Href,
          DefinitionUid = s.DefinitionUid,
          IconPath = s.PlatformId == null ? null : s.Platform!.IconPath,
          Channel = null,
          Content = null,
        })
    })
  )>
  <Wrapper Context="rows">
    <table class="bord">
      @rows
    </table>
  </Wrapper>
  <IfSome Context="model">
    <tr>
      <td>
        <InnerLinkFam Model=@model.Fam />
      </td>
      <td>
        <InnerLinkContent Model=@model MaxLength="100" />
      </td>
      <td>
        <Contenter.Components.Pages.CRUD.Sources.Sources.ViewSources List=@model.Sources NoChannel NoSource />
      </td>
      <td>
        <Contenter.Components.Pages.CRUD.Objectify.Things.ViewThings List=@model.Things />
      </td>
    </tr>
  </IfSome>
</MyLoader>
