@inherits _Displayer<Thing, Guid>

<ExpList
  ParamExpectedCount="1"
  ParamSource=@(
    this.Source.Select(thing => new {
      thing.Name,
      Definition = new ThingDefinitionView(){
        Id = thing.ThingDefinitionId,
        Scope = new() {
          Id = thing.ThingDefinition!.ScopeId,
          Name = thing.ThingDefinition!.Scope.Name,
        },
        Name = thing.ThingDefinition!.Name,
      },
      IsSets = thing.IsSets!
      .Select(set => new {
        set.Id,
        Intersections = set.Intersections!
        .Select(intersection => new ThingView(){
          Id = intersection.ThingId,
          Name = intersection.Thing.Name,
          Definition = new ThingView.ThingDefinitionView(){
            Id = intersection.Thing.ThingDefinitionId,
            Name = intersection.Thing.ThingDefinition.Name,
            PluralName = intersection.Thing.ThingDefinition.Plural,
          },
        })
      }),
      Contents = thing.ContentAssignments!
        .OrderByDescending(ass => ass.Content.PublishedAt)
        .Select(ass => new ContentView {
          Id = ass.Content.Id,
          PublishedAt = ass.Content.PublishedAt,
          Name = ass.Content.Name,
          Fam = ass.Content.FamId == null ? null : new FamView {
            Id = ass.Content.Fam!.Id,
            Name = ass.Content.Fam!.Name,
          },
          Things = ass.Content.GuestPersonaAssignments
            .OrderBy(gass => gass.Guest.Name)
            .Select(gass => new ThingView
            {
              Id = gass.GuestId,
              Name = gass.Guest.Name,
              Definition = new (){
                Id = gass.Guest.ThingDefinitionId,
                Name = gass.Guest.ThingDefinition!.Name,
                PluralName = gass.Guest.ThingDefinition!.Plural
              }
            }),
          Sources = ass.Content.Sources
          .OrderBy(item => item.PublishedAt)
          .Select(source => new SourceView {
            Id = source.Id,
            Href = source.Href,
            PublishedAt = source.PublishedAt,
            IconPath = source.PlatformId == null ? null : source.Platform!.IconPath,
            DefinitionUid = source.DefinitionUid,
            Name = source.Name,
            Channel = null,
            Content = null,
          }),
        }),
    })
  )
>
  <IfSome Context="model">
    <PageTitle>@model.Name - sars.lt</PageTitle>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
      <FluentLabel Typo=@Typography.H5>
        <InnerLinkThingDefinition Model=@model.Definition />
        @model.Name
      </FluentLabel>
    </FluentStack>
    @Before
    @if (model.IsSets.Any())
    {
      <div>
        <ol>
          @foreach(var set in model.IsSets)
          {
            <li style="border: solid 1px grey;">
              <ul>
                @foreach(var intersection in set.Intersections)
                {
                  <li>
                    <InnerLinkThingDefinition Model=@intersection.Definition More />
                    <InnerLinkThing Model=@intersection />
                  </li>
                }
              </ul>
            </li>
          }
        </ol>
      </div>
    }
    @if (model.Contents.Any())
    {
      <table class="bord">
        @foreach(var ct in model.Contents)
        {
          <tr>
            <td>@ct.PublishedAt?.ToShortDateString()</td>
            <td><InnerLinkFam Model=@ct.Fam /></td>
            <td><InnerLinkContent Model=@ct/></td>
            <td>
              <Contenter.Components.Pages.CRUD.Sources.Sources.ViewSources List=@ct.Sources NoChannel NoSource />
            </td>
            <td>
              <ViewThings List=@ct.Things />
            </td>
          </tr>
        }
      </table>
    }
    @After
  </IfSome>
</ExpList>
