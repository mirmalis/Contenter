@inherits _Displayer<Contenter.Models.Contents.Content, Guid>

<ExpList
  ParamExpectedCount="1"
  ParamSource=@(
    this.Source
    .Select(item => new {
      item.Name,
      item.PublishedAt,
      Fam = item.FamId == null ? null : new FamView {
        Id = item.FamId!.Value,
        Name = item.Fam!.Name,
      },
      Guests =  item.GuestPersonaAssignments
        .OrderBy(item => item.IndexB)
        .Select(ass => new ThingView {
          Id = ass.GuestId,
          Name = ass.Guest.Name,
          Definition = new (){
            Id = ass.Guest.ThingDefinitionId,
            Name = ass.Guest.ThingDefinition!.Name,
            PluralName = ass.Guest.ThingDefinition.Plural
          }
        }),
      Slots = item.SlotAssignments!.OrderBy(item => item.IndexA).Select(sass => new {
        sass.Slot.Id,
        sass.Slot.Name,
        sass.Slot.NamePlural,
      }),
      Things = item.GuestPersonaAssignments!
        .Select(gass => new {
          Slot = gass.SlotId == null ? null : new {
            Id = gass.SlotId,
          },
          Thing = new {
            gass.Guest.Id,
            gass.Guest.Name,
            Scope = new {
              gass.Guest.ThingDefinition.Scope.Name
            },
            Definition = new 
            {
              gass.Guest.ThingDefinition.Id,
              gass.Guest.ThingDefinition.Name
            }
          }
        }),
      Sources = item.Sources
        .OrderBy(item => item.PublishedAt)
        .Select(source => new SourceView () {
          Id = source.Id,
          Href = source.Href,
          Name = source.Name,
          PublishedAt = source.PublishedAt,
          Channel = source.ChannelUid == null ? null : new ChannelView {
            Id = source.Channel!.Id,
            Name = source.Channel.Title ?? source.Channel.Name,
            IconPath = source.Channel!.Platform.IconPath,
            Href = source.Channel.Href,
          },
          Content = null,
          IconPath = source.PlatformId == null ? null : source.Platform!.IconPath,
          DefinitionUid = source.DefinitionUid,
        }),
    })
  )
>
  <IfSome Context="model">
    <PageTitle>Content: @model.Name - sars.lt</PageTitle>
    <FluentLabel Typo=@Typography.H5>
      Content
    </FluentLabel>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
      <InnerLinkFam Model=@model.Fam After />
      <Name ParamName=@model.Name />
    </FluentStack>
    @Before
    @if (model.PublishedAt != null)
    {
      <div>
        Published: @model.PublishedAt.Value.ToShortDateString()
      </div>
    }
    <div>
      Sources (<a href="/create/s/sources?ContentId=@this.Id">add</a>): 
      <Contenter.Components.Pages.CRUD.Sources.Sources.ViewSources List=@model.Sources />
    </div>
    <hr/>
    @if (model.Things.Any())
    {
      var unclasifiedThings = model.Things.Where(item => item.Slot == null).Select(item => item.Thing);
      <div>
        <ul>
          @if (model.Slots.Any())
          {
            @foreach(var slot in model.Slots)
            {
              var things = model.Things.Where(item => item.Slot != null && item.Slot.Id == slot.Id).Select(item => item.Thing);
              <li>
              
                @if(things.Count() == 0)
                {
                } else {
                  if(things.Count() == 1)
                  {
                    var thing = things.First();
                    @slot.Name
                    <text>: 

                    @thing.Definition.Name&raquo;<a href="/o/t/@thing.Id">@thing.Name</a>
                    </text>

                  } else
                  {
                    @slot.NamePlural
                    <text>: </text>
                    <ul>
                      @foreach (var thing in things)
                      {
                        <li>
                          @thing.Definition.Name&raquo;<a href="/o/t/@thing.Id">@thing.Name</a>
                        </li>
                      }
                    </ul>
                  }
                }
            </li>
          }
        }
          @if (unclasifiedThings.Any())
          {
            @if (model.Slots.Any())
            {
              <li>
                Other:
                <ul>
                  @foreach(var thing in unclasifiedThings){
                    <li>
                      @thing.Definition.Name&raquo;@thing.Name
                    </li>
                  }
                </ul>
              </li>
            }
            else
            {
              @foreach (var thing in unclasifiedThings)
              {
                <li>
                  @thing.Definition.Name&raquo;@thing.Name
                </li>
              }
            }
          }
        </ul>
      </div>
    }
    @After
  </IfSome>
</ExpList>
