@using Contenter.Models.Contents
@inherits _Creator<Contenter.Models.Contents.Content>
@rendermode InteractiveServer
@inject Contenter.Brokers.Youtube.IYoutubeBroker yt
@inject NavigationManager navigationManager
@code {
  [Parameter]
  public Guid? SourceId { get; set; }
  [Parameter]
  public Guid? FamId { get; set; }
  [Parameter]
  public string? YoutubeVideoIdentifier { get; set; }
  override protected async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    if (this.SourceId != null)
    {
      var source = await this.db.Sources.FirstOrDefaultAsync(item => item.Id == this.SourceId);
      if(source != null)
      {
        this.model.Sources = [source];
        this.model.Name = source.Name;
        this.model.PublishedAt = source.PublishedAt;

      }
    }
    if (this.YoutubeVideoIdentifier != null)
    {
      var videoInfo = await this.yt.GetVideoInfo(this.YoutubeVideoIdentifier);
      if (videoInfo != null)
      {
        var existingSource = await this.db.Sources.FirstOrDefaultAsync(item => item.Href == videoInfo.Href);
        if(existingSource != null)
        {
          this.navigationManager.NavigateTo($"/s/sources/{existingSource.Id}");
          return;
        }
        var channel = 
          await this.db.Channels.FirstOrDefaultAsync(item => item.PlatformId == "yt" && item.Uid == videoInfo.Channel.Id)
          ??
          new Models.Sources.Channel() {
            Uid = videoInfo.Id,
            Title = videoInfo.Title,
          };
        this.model.Name = videoInfo.Title;
        this.model.PublishedAt = videoInfo.PublishedAt;
        this.model.Sources = [
          new(){
            Channel = channel,
            PublishedAt = videoInfo.PublishedAt,
            Href = videoInfo.Href,
            Name = videoInfo.Title,
            Definition = await this.db.Set<Contenter.Models.Sources.SourceDefinition>().FirstOrDefaultAsync(item => item.PlatformId == "yt" && item.Uid == "video"),
          }
        ]
        ;
      }
    }
    if (this.FamId != null)
    {
      this.model.Fam = await this.db.Set<Contenter.Models.Contents.ContentFam>().FirstOrDefaultAsync(item => item.Id == this.FamId);
    }
  }
}
<_Bind model=@this.model OnValidSubmitCallback=@(async (model) => await this.DoCreate(this.model))>
  @ChildContent
</_Bind>
