@inherits _Binder<Contenter.Models.Contents.Content>
@rendermode InteractiveServer
@{
  var cultureInfo = new System.Globalization.CultureInfo("lt-LT");
}
@code {
  [Parameter] 
  public bool ShowSources { get; set; } = true;
}
@inject IDialogService dialoger
<EditForm Model=@this.model OnValidSubmit=@this.OnValidSubmit FormName="createContent">
  <DataAnnotationsValidator />
  <FluentValidationSummary />
  <FluentStack Orientation="@Orientation.Vertical">
    <div>
      <FluentTextField @bind-Value=@model.Name Label="Pavadinimas" Style="width:100%;" />
      
      <div>
        <FluentInputLabel Label="Paskelbimo data" Required />
        <FluentDatePicker Culture="@cultureInfo" 
          Value=@(this.model.PublishedAt)
          ValueChanged=@(val => model.PublishedAt = val)
          ValueExpression=@(() => model.PublishedAt)
          OnCalendarOpen=@(() => {
            if(this.model.PublishedAt == null){
              var now = DateTime.Now;
              this.model.PublishedAt = new DateTime(now.Year, now.Month, now.Day, now.Hour, 0, 0);
            }
          })
        />
        <FluentTimePicker  @bind-Value=@model.PublishedAt @bind-Value:format="MM:hh" />
      </div>
      <div>
        <Contenter.Views.Components.BindFlags @bind-value=@this.model.Flags />
      </div>
    </div>
    <div>
      <FluentInputLabel Label="Laida: ">
        @if (this.model.Fam != null)
        {
          <FluentButton OnClick=@(() => this.model.Fam = null)>
            @this.model.Fam
          </FluentButton>
        }
        else
        {
          @if (this.model.Sources?.Count == 1)
          {
            var source = this.model.Sources.First();
            if(source.ChannelUid != null)
            {
              <ExpList 
                ParamSource=@(
                  this.db.Entry(source).Reference(item => item.Channel)
                  .Query()
                  .SelectMany(ch => ch.CotentFamsAssignments.Select(ass => ass.ContentFam))
                )
              >
                <IfSome Context="fam">
                  <FluentButton OnClick=@(() => this.model.Fam = fam) Appearance="@Appearance.Accent">
                    @fam.Name
                  </FluentButton>

                </IfSome>
              </ExpList>
            }
          }

          <ChooseFam 
            value=@this.model.Fam
            valueChanged=@(val => {
              if(val.Id == default) // if new created
              {
              }
              this.model.Fam = val;
            })
            MinTermLength="2"
          > Pasirinkti
          </ChooseFam>
        }
      </FluentInputLabel>
      
    </div>
    <div class="border">
      <FluentInputLabel Label="Groups" />
      <ChooseSlot
        FilterExpression=@(slot => !model.SlotAssignments!.Select(item => item.Slot).Contains(slot))
        value=@null
        valueChanged=@(
          val => {
            model.SlotAssignments ??= [];
            model.SlotAssignments.Add
            (
              new Content_ContentSlot()
              {
                IndexA = (model.SlotAssignments?.Count ?? 0)+1,
                IndexB = 0,
                Slot = val
              }
            );
          }
        )
      >Add Group</ChooseSlot>
      <Listmanager @bind-list=@model.SlotAssignments Context="ass">
        <td>@ass.Slot</td>
      </Listmanager>
    </div>
    <div>
      <FluentInputLabel Label="Svečiai: ">
        <ChooseThing MinTermLength="3" 
          value="null" 
          valueChanged=@(val => {
            if(val == null)
              return;
            this.model.GuestPersonaAssignments.Add(
              new() {
                IndexA = this.model.GuestPersonaAssignments.Any() ? this.model.GuestPersonaAssignments.Max(item => item.IndexA) + 1 : 1,
                Guest = val,
                Percentage = 100,
              }
            );
          })
        >Pridėti svečią</ChooseThing>
      </FluentInputLabel>
      @{
         IEnumerable<Slot?> modelSlots = [null, .. model.SlotAssignments!.Select(item => item.Slot)];
      }
      <Listmanager 
        T=@(ContentGuests<Models.Objectify.Thing>)
        @bind-list=@model.GuestPersonaAssignments 
        Context="ass"
      >
        <td>@ass.Guest.ThingDefinition?.Scope&raquo;@ass.Guest?.ThingDefinition</td>
        <td>@ass.Guest</td>
        <td>
          <FluentSelect 
            @bind-SelectedOption=@ass.Slot 
            Items=@modelSlots
          />
        </td>
      </Listmanager>
    </div>
    @if (ChildContent != null)
    {
      <FluentButton Type=@ButtonType.Submit Appearance=@Appearance.Accent>@ChildContent</FluentButton>
    }
  </FluentStack>
</EditForm>
@code {
}
