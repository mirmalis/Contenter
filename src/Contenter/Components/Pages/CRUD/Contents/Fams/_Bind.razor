@inherits _Binder<Contenter.Models.Contents.ContentFam>
@rendermode InteractiveServer
@code {
  override protected async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
  }
}
<EditForm Model=@this.model OnValidSubmit=@this.OnValidSubmit FormName="create">
  <DataAnnotationsValidator />
  <FluentValidationSummary />

  <FluentStack Orientation="@Orientation.Vertical">
    <div>
      <FluentTextField @bind-Value=@model.Name Label="Name" Required />
    </div>
    <div>
      <EFSelect @bind-value=@model.Parent Label="Parent" />
    </div>
    <div>
      PayLinks:
      <div>

        <InputText @bind-Value=@this.nextPayLink />
        <button  type="button"
          Disabled="@(string.IsNullOrWhiteSpace(this.nextPayLink))"
          @onclick=@(() => {
            model.PayLinks.Add(this.nextPayLink);
            this.nextPayLink = string.Empty;
          })
        >
          Add
        </button>
      </div>
      @if (model.PayLinks.Any())
      {
        <ul>
          @foreach(var paylink in model.PayLinks)
          {
            <li @onclick=@(() => model.PayLinks.Remove(paylink))>
              @paylink

              <span class="muted">(click to remove)</span>
            </li>
          }
        </ul>
      }
    </div>
    <div></div>
    @if (ChildContent != null)
    {
      <FluentButton Type=@ButtonType.Submit Appearance=@Appearance.Accent>@ChildContent</FluentButton>
    }
  </FluentStack>
</EditForm>

@code {
  private string nextPayLink { get; set; } = string.Empty;
}
