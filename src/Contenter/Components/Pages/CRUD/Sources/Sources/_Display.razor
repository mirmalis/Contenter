@inherits _Displayer<Contenter.Models.Sources.Source, Guid>
@inject Contenter.Brokers.Sources.ISourceBroker sourceBroker
@rendermode InteractiveServer
<ExpList
  ParamExpectedCount="1"
  ParamSource=@(
    this.Source
    .Select(item => new {
      item.Name,
      item.Href,
      item.Flags,
      Platform = item.PlatformId == null ? null : new {
        IconPath = item.Platform!.IconPath,
        Channel = item.ChannelUid == null ? null : new {
          Id = item.Channel!.Id,
          Uid = item.ChannelUid,
          Title = item.Channel!.Title
        },
        item.DefinitionUid,
      },
      Content = item.ContentId == null ? null : new ContentView {
        Sources = null,
        Id = item.Content!.Id,
        Name = item.Content.Name,
        Fam = item.Content.FamId == null ? null : new FamView {
          Id = item.Content.Fam!.Id,
          Name = item.Content.Fam.Name,
        },
        Guests = item.Content.GuestPersonaAssignments
        .Select(guestAss => new PersonaView {
          Id = guestAss.Guest.Id,
          Name = guestAss.Guest.Name,
        })
      }
    })
  )
>
  <IfSome Context="model">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">

      @if(model.Platform != null)
      {
        @if(model.Platform.Channel != null)
        {
          <div>
            <a href="/s/channels/@model.Platform.Channel.Id">@model.Platform.Channel.Title</a>
            <text> &raquo; </text>
          </div>
        }
      }
      <Contenter.Views.Bases.AnchorBase href=@(model.Href) Text=@(model.Name ?? model.Platform?.DefinitionUid ?? "source") NewTab IconStart=@model.Platform?.IconPath />
    </FluentStack>
    @Before
    @if (model.Content != null)
    {
      <div>
        <InnerLinkFam Model=@model.Content.Fam After />
        <InnerLinkContent Model=@model.Content />
        <OneOrMany ParamList=@model.Content.Guests Context="guest" Many>
          <IfNone></IfNone>
          <ChildContent>
            <InnerLinkPersona Model=@guest />
          </ChildContent>
        </OneOrMany>
      </div>
    }
    <AuthorizeView Policy="AdminSuper">
      <Authorized>
        @if (model.Flags.HasFlag(Models.Sources.SourceFlags.HiddenFromMain))
        {
          <button @onclick=@(async () => await this.sourceBroker.Shown_at_MainPage(this.Id, true))>show in main</button>
          
        } else
        {
          <button @onclick=@(async () => await this.sourceBroker.Shown_at_MainPage(this.Id, false))>hide from main</button>
        }
        @if (model.Flags.HasFlag(Models.Sources.SourceFlags.Preview))
        {
          <button @onclick=@(async () => await this.sourceBroker.Set_is_Preview(this.Id, false))>set is not preview</button>
        } else
        {
          <button @onclick=@(async () => await this.sourceBroker.Set_is_Preview(this.Id, true))>set is preview</button>
        }
      </Authorized>
    </AuthorizeView>
    @After
  </IfSome>
</ExpList>
