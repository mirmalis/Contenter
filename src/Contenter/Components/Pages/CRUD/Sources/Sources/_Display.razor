@inherits _Displayer<Contenter.Models.Sources.Source, Guid>
@inject Contenter.Brokers.Sources.ISourceBroker sourceBroker
@rendermode InteractiveServer
<ExpList
  ParamExpectedCount="1"
  ParamSource=@(
    this.Source
    .Select(item => new {
      View = new SourceView(){
        Id = item.Id,
        Href = item.Href,
        Name = item.Name,
        IconPath = item.Platform == null ? null : item.Platform.IconPath,
        PublishedAt = item.PublishedAt,
        DefinitionUid = item.DefinitionUid,
        Channel = item.ChannelUid == null ? null : new ChannelView{
          Href = item.Channel!.Href,
          IconPath =  item.Channel.Platform.IconPath,
          Id = item.Channel.Id,
          Name = item.Channel.Name,
        },
        Content = item.ContentId == null ? null : new ContentView(){
          Fam = item.Content.FamId == null ? null : new FamView(){
            Id = item.Content.FamId.Value,
            Name = item.Content.Fam!.Name
          },
          Id = item.ContentId.Value,
          Name = item.Content.Name,
          PublishedAt = item.Content.PublishedAt,
          Sources = null,
          Things = item.Content.ThingAssignments.Select(tass => new ThingView(){
            Id = tass.GuestId,
            Name = tass.Guest.Name,
            Definition = new ThingView.ThingDefinitionView(){
              Id = tass.Guest.ThingDefinitionId,
              Name = tass.Guest.ThingDefinition.Name,
              PluralName = tass.Guest.ThingDefinition.Plural,
            }
          }),
        }
      },
      item.Name,
      item.Href,
      item.Flags,
      Platform = item.PlatformId == null ? null : new {
        IconPath = item.Platform!.IconPath,
        Channel = item.ChannelUid == null ? null : new {
          Id = item.Channel!.Id,
          Uid = item.ChannelUid,
          Title = item.Channel!.Title
        },
        item.DefinitionUid,
      },
      Content = item.ContentId == null ? null : new {
        Id = item.ContentId.Value,
      }
    })
  )
>
  <IfSome Context="model">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">

      @if(model.Platform != null)
      {
        @if(model.Platform.Channel != null)
        {
          <div>
            <a href="/s/channels/@model.Platform.Channel.Id">@model.Platform.Channel.Title</a>
            <text> &raquo; </text>
          </div>
        }
      }
      <OuterLinkSource Model=@model.View />
    </FluentStack>
    @Before
    <AuthorizeView Policy="AdminSuper">
      <Authorized>
        @if (model.Flags.HasFlag(Models.Sources.SourceFlags.HiddenFromMain))
        {
          <button @onclick=@(async () => await this.sourceBroker.Shown_at_MainPage(this.Id, true))>show in main</button>
        } else
        {
          <button @onclick=@(async () => await this.sourceBroker.Shown_at_MainPage(this.Id, false))>hide from main</button>
        }
        @if (model.Flags.HasFlag(Models.Sources.SourceFlags.Preview))
        {
          <button @onclick=@(async () => await this.sourceBroker.Set_is_Preview(this.Id, false))>set is not preview</button>
        } else
        {
          <button @onclick=@(async () => await this.sourceBroker.Set_is_Preview(this.Id, true))>set is preview</button>
        }
      </Authorized>
    </AuthorizeView>
    @if (model.Content != null)
    {
      <Contenter.Components.Pages.CRUD.Contents.Contents._Display
        Id=@model.Content.Id
        CallerSourceId=@this.Id
        LinkToSelf
      />
    }
    @After
  </IfSome>
</ExpList>
