@inherits _Binder<Contenter.Models.Sources.Source>
@using Contenter.Views.Components.CreateOrChooseComponents
@rendermode InteractiveServer
<EditForm Model=@this.model OnValidSubmit=@this.OnValidSubmit FormName="create">
  <DataAnnotationsValidator />
  <FluentValidationSummary />

  <FluentStack Orientation="@Orientation.Vertical">
    <div>
      <EFSelect Label="Platform" value=@this.model.Platform valueChanged=@((Models.Sources.SourcePlatform val) => {
        this.model.Platform = val;
        this.model.Channel = null;
        this.model.Definition = null;
      }) />
      <FluentTextField Value=@this.model.Href ValueChanged="@(async href => await this.SetHref(href))" Label="Href" Required Style="width:100%;" />
      @if(!string.IsNullOrWhiteSpace(this.model.Href))
      {
        <FluentButton OnClick=@(async () => {
          await this.SetHref(this.model.Href);
          this.StateHasChanged();
        })>Try get data
        @(this.model.Platform?.Id ?? this.model.PlatformId)
        </FluentButton>
        <ExpList ParamSource=@(this.db.Sources.Where(item => item.Id != this.model.Id && item.Href == this.model.Href).Select(item => new {item.Id, item.Name}))>
          <Wrapper Context="rows">
            <div>
              Sources with same Href:
              <ul>@rows</ul>
            </div>
          </Wrapper>
          <IfSome Context="s">
            <li>
              <a href="/s/sources/@s.Id">@(s.Name ?? "Details")</a>
            </li>
          </IfSome>
          <IfNone></IfNone>
        </ExpList>
      }
        
      @if (this.model.Href != null)
      {
        @if (this.model.Platform != null || this.model.PlatformId != null)
        {
          <EFSelect Label="Definition"
                    ParamSource=@(db => this.db.Entry(this.model.Platform).Collection(pl => pl.Definitions).Query())
                    @bind-value=@this.model.Definition/>
          <EFSelect Label="Channel"
                    ParamSource=@(db => this.db.Entry(this.model.Platform).Collection(pl => pl.Channels).Query())
                    @bind-value=@this.model.Channel 
          />
        }
        <FluentTextField @bind-Value=@this.model.Name Label="Name" Style="width:100%;" />
        <FluentDatePicker @bind-Value=@this.model.PublishedAt Label="Published at" />
        <FluentTimePicker @bind-Value=@this.model.PublishedAt />
      }
    </div>
    <div>
      Content:
      @if(this.model.Content == null)
      {
        <FluentButton Appearance="@Appearance.Accent"
          OnClick="@(() => {
            this.model.Content = new(){
              Name = this.model.Name,
              GuestPersonaAssignments = [],
              PublishedAt = this.model.PublishedAt,
            };
          })" >
          Form new Content
        </FluentButton>
      } else
      {
        <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" OnClick=@(() => this.model.Content = null)></FluentButton>
        <div style="border: solid 1px grey;">
          <Contenter.Components.Pages.CRUD.Contents.Contents._Bind
            model=@model.Content
            OnValidSubmitCallback=@(val => model.Content = val)
          />
        </div>
        
      }
    </div>
    @if (ChildContent != null)
    {
      <div>
        <FluentButton Type=@ButtonType.Submit Appearance=@Appearance.Accent>@ChildContent</FluentButton>
      </div>
    }
  </FluentStack>
</EditForm>
