@inject IDialogService DialogService
@using Contenter.Models.Objectify
@code {
  [Parameter] 
  public Thing? value { get; set; } 
  [Parameter] 
  public EventCallback<Thing?> valueChanged { get; set; }

  [Parameter]
  public RenderFragment ChildContent { get; set; } =@<text>Ieškoti</text>;

  [Parameter]
  public Guid? ParamThingDefinitionId { get; set; }
}

@code {
  private string SearchTerm { get; set; } = string.Empty;
  [Parameter] public int MinTermLength { get; set; } = 0;
  private bool Hidden { get; set; } = true;
}
@inject Data.Database db
<FluentButton OnClick=@(() => this.Hidden = !this.Hidden)>
  @ChildContent
</FluentButton>
@code {
  private Scope? scope { get; set; }
  private void SetScope(Scope? value)
  {
    this.scope = value;
    this.thingDefinition = null;
  }
  private ThingDefinition? thingDefinition{ get; set; }
}
@if(!this.Hidden)
{
  <FluentDialog Hidden="@this.Hidden">
    <FluentDialogHeader>
      <FluentTextField Immediate ImmediateDelay="500" 
        @bind-Value=@this.SearchTerm 
        Label="Paieškos frazė"
        Required
      />

      @if (this.ParamThingDefinitionId == null)
      {
        <FluentInputLabel Label="">
          @if (this.scope != null)
          {
            <FluentButton Appearance="Appearance.Accent" OnClick=@(() => this.SetScope(null))>@scope?.Name</FluentButton>
            <text>&raquo;</text>
            @if (this.thingDefinition == null)
            {
              <ExpList ParamSource=@(
                 this.db.Entry(this.scope).Collection(scope => scope.ThingDefinitions).Query()
                 )>
                <IfSome Context="td">
                  <FluentButton OnClick=@(() => this.thingDefinition = td)>
                    @td.Name
                  </FluentButton>
                </IfSome>
              </ExpList>
            }
            else
            {
              <FluentButton Appearance="Appearance.Accent" OnClick=@(() => this.thingDefinition = null)>
                @this.thingDefinition?.Name
              </FluentButton>
            }
          }
          else
          {
            <ExpList ParamSource=@(this.db.Scopes)>
              <IfSome Context="sc">
                <FluentButton OnClick=@(() => this.SetScope(sc))>
                  @sc.Name
                </FluentButton>
              </IfSome>
            </ExpList>
          }
        </FluentInputLabel>
      }
    </FluentDialogHeader>
    <FluentDialogBody>
      
      @if (
        this.MinTermLength == 0 ||
        this.thingDefinition != null ||
        (
          !string.IsNullOrWhiteSpace(this.SearchTerm)
          && this.SearchTerm.Length >= this.MinTermLength
        )
      )
      {
        <ExpList 
          ParamSource=@(
            this.db.Things
              .Where(thing => 
                (this.ParamThingDefinitionId == null || thing.ThingDefinitionId == this.ParamThingDefinitionId)
                &&
                (thing.Name == this.SearchTerm || thing.Name.ToLower().Contains(this.SearchTerm.ToLower()))
                && 
                (this.thingDefinition == null || thing.ThingDefinitionId == this.thingDefinition.Id)
              ) 
              // TODO: neranda su didžiosiomis LT raidėmis
              .Select(thing => new {
                thing.Id,
                thing.Name
              })
          )
        >
          <Wrapper Context="rows">
            <table class="bord">
              @rows
            </table>
          </Wrapper>
          <IfSome Context="model">
            <tr>
              <td>@model.Name</td>
              <td>
                <FluentButton OnClick=@(async () => await this.Choose(model.Id))>
                  Choose
                </FluentButton>
              </td>
            </tr>
          </IfSome>
          <IfNone>
            @{
              var n = new Contenter.Models.Objectify.Thing()
              {
                Name = this.SearchTerm,
                ThingDefinition = this.thingDefinition,
              };
            }
            <FluentLabel Typo=@Typography.Subject>Sukurti naują asmenį:</FluentLabel>
            <Contenter.Components.Pages.CRUD.Objectify.Things._Bind model=@n OnValidSubmitCallback=@(async (val) => await this.Choose(val) )>
              Sukurti naują
            </Contenter.Components.Pages.CRUD.Objectify.Things._Bind>
          </IfNone>
        </ExpList>
      }
      else
      {
        @if (this.MinTermLength > 0)
        {
          <span class="muted">Įveskite bent @this.MinTermLength raides paieškoje, kad surasti asmenį.</span>
        }
      }
    </FluentDialogBody>
    <FluentDialogFooter>
      <FluentButton OnClick=@(() => this.Hidden = true)>Cancel</FluentButton>
    </FluentDialogFooter>
  </FluentDialog>
}


@code {
  private async Task Choose(Guid id)
  {
    var existing = await this.db.Things
      .Where(item => item.Id == id)
      .Include(thing => thing.ThingDefinition.Scope)
      .FirstOrDefaultAsync();
    if (existing == null)
      return;
    await Choose(existing);
  }
  private async Task Choose(Thing choice)
  {
    this.SearchTerm = string.Empty;
    this.Hidden = true;
    this.scope = null;
    this.thingDefinition = null;
    await this.valueChanged.InvokeAsync(choice);
  }
}
