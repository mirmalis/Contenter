@typeparam T where T : class, Models.Contents.ILister

@code {
  [EditorRequired]
  [Parameter] public List<T> list { get; set; } = [];
  [Parameter] public EventCallback<List<T>> listChanged { get; set; }

  [EditorRequired]
  [Parameter]
  public RenderFragment<T> ChildContent { get; set; } = default!;

  [Parameter]
  public RenderFragment? TableHeader { get; set; }

  [Parameter]
  public bool Backwards { get; set; } = false;

  [Parameter]
  public Func<T, bool> disabledFunc { get; set; } = item => false;

  private int GetIndex(T item)
  {
    if(this.Backwards)
      return item.IndexB;
    return item.IndexA;
  }
}

@if (this.list != null && this.list.Any())
{
  <table class="bord">
    @this.TableHeader
    @foreach(var ass in list.OrderBy(item => GetIndex(item)))
    {
      <tr>
        <td>@GetIndex(ass)</td>
        @ChildContent(ass)
        <td>
          <FluentButton IconEnd="@(new Icons.Regular.Size16.ArrowCircleUp())"
                        OnClick="@(async () => await this.MoveUp(ass))"
                        Disabled="@(GetIndex(ass) == 1)" />
          <FluentButton IconEnd="@(new Icons.Regular.Size16.ArrowCircleDown())"
                        OnClick="@(async () => await this.MoveDown(ass))"
                        Disabled="@(GetIndex(ass) == this.list.Count)" />
          @if (disabledFunc(ass))
          {
            <FluentIcon Value="@(new Icons.Regular.Size20.ShieldDismiss())" />
          } else
          {
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())"
                          OnClick="@(async () => await this.Remove(ass))"
                          Disabled="@(GetIndex(ass) < this.list.Count)" />
          }
        </td>
      </tr>
    }
  </table>
}

@code {
  private async Task MoveUp(T ass)
  {
    var prev = this.list.Where(item => GetIndex(item) == GetIndex(ass) - 1).FirstOrDefault();
    if (this.Backwards)
    {
      if (prev != null)
      {
        prev.IndexB += 1;
      }
      ass.IndexB -= 1;
    } else
    {
      if (prev != null)
      {
        prev.IndexA += 1;
      }
      ass.IndexA -= 1;
    }

    await this.listChanged.InvokeAsync(this.list);
  }
  private async Task MoveDown(T ass)
  {
    if(GetIndex(ass) <= 0)
    {
      if (Backwards)
      {
        ass.IndexB = this.list.Select(item  => item.IndexB).Max() + 1;
      }
      else
      {
        ass.IndexA = this.list.Select(item => item.IndexA).Max() + 1;
      }
      return;
    }
    var next = this.list.Where(item => GetIndex(item) == GetIndex(ass) + 1).FirstOrDefault();
    if (next != null)
    {
      if (Backwards)
      {
        next.IndexB -= 1;

      } else
      {
        next.IndexA -= 1;
      }
    }
    if (Backwards)
    {
    ass.IndexB += 1;

    } else
    {
    ass.IndexA += 1;
      
    }
    await this.listChanged.InvokeAsync(this.list);
  }
  private async Task Remove(T ass)
  {
    this.list.Remove(ass);
    await this.listChanged.InvokeAsync(this.list);
  }
}
